
32max7219.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  00000266  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000504  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000203  00000000  00000000  000007f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000229  00000000  00000000  000009f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c4  00000000  00000000  00000c20  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001f2  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000388  00000000  00000000  00000ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  0000125e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	00 66       	ori	r16, 0x60	; 96
  56:	66 18       	sub	r6, r6
  58:	18 00       	.word	0x0018	; ????
  5a:	3c 42       	sbci	r19, 0x2C	; 44

0000005c <smile>:
  5c:	00 66 66 18 18 81 42 3c                             .ff...B<

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a8 36       	cpi	r26, 0x68	; 104
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  84:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <spi_send>:
        0b01000010,
};


void spi_send(uint8_t data)
{
  8c:	98 e0       	ldi	r25, 0x08	; 8
    uint8_t i;

    for (i = 0; i < 8; i++, data <<= 1)
    {
	CLK_LOW();
  8e:	c2 98       	cbi	0x18, 2	; 24
	if (data & 0x80)
  90:	88 23       	and	r24, r24
  92:	14 f4       	brge	.+4      	; 0x98 <spi_send+0xc>
	    DATA_HIGH();
  94:	c0 9a       	sbi	0x18, 0	; 24
  96:	01 c0       	rjmp	.+2      	; 0x9a <spi_send+0xe>
	else
	    DATA_LOW();
  98:	c0 98       	cbi	0x18, 0	; 24
	CLK_HIGH();
  9a:	c2 9a       	sbi	0x18, 2	; 24

void spi_send(uint8_t data)
{
    uint8_t i;

    for (i = 0; i < 8; i++, data <<= 1)
  9c:	88 0f       	add	r24, r24
  9e:	91 50       	subi	r25, 0x01	; 1
  a0:	b1 f7       	brne	.-20     	; 0x8e <spi_send+0x2>
	else
	    DATA_LOW();
	CLK_HIGH();
    }
    
}
  a2:	08 95       	ret

000000a4 <max7219_writec>:

void max7219_writec(uint8_t high_byte, uint8_t low_byte)
{
  a4:	cf 93       	push	r28
  a6:	c6 2f       	mov	r28, r22
    CS_LOW();
  a8:	c1 98       	cbi	0x18, 1	; 24
    spi_send(high_byte);
  aa:	0e 94 46 00 	call	0x8c	; 0x8c <spi_send>
    spi_send(low_byte);
  ae:	8c 2f       	mov	r24, r28
  b0:	0e 94 46 00 	call	0x8c	; 0x8c <spi_send>
    CS_HIGH();
  b4:	c1 9a       	sbi	0x18, 1	; 24
}
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <max7219_clear>:

void max7219_clear(void)
{
  ba:	cf 93       	push	r28
    uint8_t i;
    for (i = 0; i < 8; i++)
  bc:	c0 e0       	ldi	r28, 0x00	; 0
    {
	max7219_writec(i+1, 0);
  be:	cf 5f       	subi	r28, 0xFF	; 255
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	8c 2f       	mov	r24, r28
  c4:	0e 94 52 00 	call	0xa4	; 0xa4 <max7219_writec>
}

void max7219_clear(void)
{
    uint8_t i;
    for (i = 0; i < 8; i++)
  c8:	c8 30       	cpi	r28, 0x08	; 8
  ca:	c9 f7       	brne	.-14     	; 0xbe <max7219_clear+0x4>
    {
	max7219_writec(i+1, 0);
    }
}
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <max7219_init>:

void max7219_init(void)
{
    INIT_PORT();
  d0:	87 b3       	in	r24, 0x17	; 23
  d2:	87 60       	ori	r24, 0x07	; 7
  d4:	87 bb       	out	0x17, r24	; 23
    // Decode mode: none
    max7219_writec(0x09, 0);
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	89 e0       	ldi	r24, 0x09	; 9
  da:	0e 94 52 00 	call	0xa4	; 0xa4 <max7219_writec>
    // Intensity: 3 (0-15)
    max7219_writec(0x0A, 1);
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	8a e0       	ldi	r24, 0x0A	; 10
  e2:	0e 94 52 00 	call	0xa4	; 0xa4 <max7219_writec>
    // Scan limit: All "digits" (rows) on
    max7219_writec(0x0B, 7);
  e6:	67 e0       	ldi	r22, 0x07	; 7
  e8:	8b e0       	ldi	r24, 0x0B	; 11
  ea:	0e 94 52 00 	call	0xa4	; 0xa4 <max7219_writec>
    // Shutdown register: Display on
    max7219_writec(0x0C, 1);
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	0e 94 52 00 	call	0xa4	; 0xa4 <max7219_writec>
    // Display test: off
    max7219_writec(0x0F, 0);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	8f e0       	ldi	r24, 0x0F	; 15
  fa:	0e 94 52 00 	call	0xa4	; 0xa4 <max7219_writec>
    max7219_clear();
  fe:	0e 94 5d 00 	call	0xba	; 0xba <max7219_clear>
 102:	08 95       	ret

00000104 <update_display>:


uint8_t display[8];

void update_display(void)
{
 104:	ef 92       	push	r14
 106:	ff 92       	push	r15
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	0f 2e       	mov	r0, r31
 112:	f0 e6       	ldi	r31, 0x60	; 96
 114:	ef 2e       	mov	r14, r31
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	ff 2e       	mov	r15, r31
 11a:	f0 2d       	mov	r31, r0
 11c:	08 e6       	ldi	r16, 0x68	; 104
 11e:	10 e0       	ldi	r17, 0x00	; 0
 120:	e7 01       	movw	r28, r14
    uint8_t i;

    for (i = 0; i < 8; i++)
    {
	max7219_writec(i+1, display[i]);
 122:	69 91       	ld	r22, Y+
 124:	8c 2f       	mov	r24, r28
 126:	8e 19       	sub	r24, r14
 128:	0e 94 52 00 	call	0xa4	; 0xa4 <max7219_writec>

void update_display(void)
{
    uint8_t i;

    for (i = 0; i < 8; i++)
 12c:	c0 17       	cp	r28, r16
 12e:	d1 07       	cpc	r29, r17
 130:	c1 f7       	brne	.-16     	; 0x122 <update_display+0x1e>
    {
	max7219_writec(i+1, display[i]);
    }
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	ff 90       	pop	r15
 13c:	ef 90       	pop	r14
 13e:	08 95       	ret

00000140 <image>:

void image(const __flash uint8_t im[8])
{
 140:	fc 01       	movw	r30, r24
 142:	a0 e6       	ldi	r26, 0x60	; 96
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	88 e6       	ldi	r24, 0x68	; 104
 148:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t i;

    for (i = 0; i < 8; i++)
	display[i] = im[i];
 14a:	25 91       	lpm	r18, Z+
 14c:	2d 93       	st	X+, r18

void image(const __flash uint8_t im[8])
{
    uint8_t i;

    for (i = 0; i < 8; i++)
 14e:	a8 17       	cp	r26, r24
 150:	b9 07       	cpc	r27, r25
 152:	d9 f7       	brne	.-10     	; 0x14a <image+0xa>
	display[i] = im[i];
}
 154:	08 95       	ret

00000156 <main>:

int main(void)
{
    uint8_t i;
    
    max7219_init();
 156:	0e 94 68 00 	call	0xd0	; 0xd0 <max7219_init>
	image(smile);
	update_display();
	_delay_ms(500);

	// Invert display
	for (i = 0 ; i < 8*8; i++)
 15a:	00 e0       	ldi	r16, 0x00	; 0
	break;
    case 1: // Set bit
	display[r] |= (0x80 >> c);
	break;
    default: // XOR bit
	display[r] ^= (0x80 >> c);
 15c:	c0 e8       	ldi	r28, 0x80	; 128
 15e:	d0 e0       	ldi	r29, 0x00	; 0
    
    max7219_init();
    
    while(1)
    {
	image(sad);
 160:	84 e5       	ldi	r24, 0x54	; 84
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 a0 00 	call	0x140	; 0x140 <image>
	update_display();
 168:	0e 94 82 00 	call	0x104	; 0x104 <update_display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	2f e9       	ldi	r18, 0x9F	; 159
 16e:	36 e8       	ldi	r19, 0x86	; 134
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	21 50       	subi	r18, 0x01	; 1
 174:	30 40       	sbci	r19, 0x00	; 0
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0x1c>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x26>
 17c:	00 00       	nop
	_delay_ms(500);
	image(smile);
 17e:	8c e5       	ldi	r24, 0x5C	; 92
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 a0 00 	call	0x140	; 0x140 <image>
	update_display();
 186:	0e 94 82 00 	call	0x104	; 0x104 <update_display>
 18a:	9f e9       	ldi	r25, 0x9F	; 159
 18c:	26 e8       	ldi	r18, 0x86	; 134
 18e:	31 e0       	ldi	r19, 0x01	; 1
 190:	91 50       	subi	r25, 0x01	; 1
 192:	20 40       	sbci	r18, 0x00	; 0
 194:	30 40       	sbci	r19, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x3a>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x44>
 19a:	00 00       	nop
	_delay_ms(500);

	// Invert display
	for (i = 0 ; i < 8*8; i++)
 19c:	10 2f       	mov	r17, r16
	{
	    set_pixel(i / 8, i % 8, 2);
 19e:	e1 2f       	mov	r30, r17
 1a0:	e6 95       	lsr	r30
 1a2:	e6 95       	lsr	r30
 1a4:	e6 95       	lsr	r30
	break;
    case 1: // Set bit
	display[r] |= (0x80 >> c);
	break;
    default: // XOR bit
	display[r] ^= (0x80 >> c);
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	e0 5a       	subi	r30, 0xA0	; 160
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
	_delay_ms(500);

	// Invert display
	for (i = 0 ; i < 8*8; i++)
	{
	    set_pixel(i / 8, i % 8, 2);
 1ac:	81 2f       	mov	r24, r17
 1ae:	87 70       	andi	r24, 0x07	; 7
	break;
    case 1: // Set bit
	display[r] |= (0x80 >> c);
	break;
    default: // XOR bit
	display[r] ^= (0x80 >> c);
 1b0:	9e 01       	movw	r18, r28
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <main+0x62>
 1b4:	35 95       	asr	r19
 1b6:	27 95       	ror	r18
 1b8:	8a 95       	dec	r24
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <main+0x5e>
 1bc:	c9 01       	movw	r24, r18
 1be:	90 81       	ld	r25, Z
 1c0:	89 27       	eor	r24, r25
 1c2:	80 83       	st	Z, r24

	// Invert display
	for (i = 0 ; i < 8*8; i++)
	{
	    set_pixel(i / 8, i % 8, 2);
	    update_display();
 1c4:	0e 94 82 00 	call	0x104	; 0x104 <update_display>
 1c8:	83 ec       	ldi	r24, 0xC3	; 195
 1ca:	99 e0       	ldi	r25, 0x09	; 9
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0x76>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x7c>
 1d2:	00 00       	nop
	image(smile);
	update_display();
	_delay_ms(500);

	// Invert display
	for (i = 0 ; i < 8*8; i++)
 1d4:	1f 5f       	subi	r17, 0xFF	; 255
 1d6:	10 34       	cpi	r17, 0x40	; 64
 1d8:	11 f7       	brne	.-60     	; 0x19e <main+0x48>
 1da:	9f e9       	ldi	r25, 0x9F	; 159
 1dc:	26 e8       	ldi	r18, 0x86	; 134
 1de:	31 e0       	ldi	r19, 0x01	; 1
 1e0:	91 50       	subi	r25, 0x01	; 1
 1e2:	20 40       	sbci	r18, 0x00	; 0
 1e4:	30 40       	sbci	r19, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0x8a>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x94>
 1ea:	00 00       	nop
 1ec:	b9 cf       	rjmp	.-142    	; 0x160 <main+0xa>

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
