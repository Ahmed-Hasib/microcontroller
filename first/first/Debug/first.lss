
first.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000048  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000009c  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  000000cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000092  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000053  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000b1  00000000  00000000  000001d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000125  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  000003cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{ 
	DDRB |=(1<<PINB0);
  30:	b8 9a       	sbi	0x17, 0	; 23
	PORTB &= ~(1<<PINB0);
  32:	c0 98       	cbi	0x18, 0	; 24
	DDRB &= ~(1<<PINB1);
  34:	b9 98       	cbi	0x17, 1	; 23
	PORTB |=(1<<PINB1);
  36:	c1 9a       	sbi	0x18, 1	; 24
    while(1)
    {
		if(bit_is_clear(PINB,1))
  38:	b1 99       	sbic	0x16, 1	; 22
  3a:	02 c0       	rjmp	.+4      	; 0x40 <__SREG__+0x1>
		{
			PORTB |=(1<<PINB0);
  3c:	c0 9a       	sbi	0x18, 0	; 24
  3e:	fc cf       	rjmp	.-8      	; 0x38 <main+0x8>
		}
		else
		{
			//PORTB |=(1<<PINB0);
			//_delay_ms(500);
			PORTB &= ~(1<<PINB0);
  40:	c0 98       	cbi	0x18, 0	; 24
  42:	fa cf       	rjmp	.-12     	; 0x38 <main+0x8>

00000044 <_exit>:
  44:	f8 94       	cli

00000046 <__stop_program>:
  46:	ff cf       	rjmp	.-2      	; 0x46 <__stop_program>
